 V0:char strExp="3+4";
#include <stdio.h>
#include <string.h>
int main()
{
	char strExp[]="3+4";
	int left=strExp[0]-'0';
	int right=strExp[2]-'0';
	int res=left+right;
	printf("res=%d\n",res);
	return 0;
}


V1:char strExp="1+2+2+1+2+5+4-1-3+4-8";
#include <stdio.h>
#include <string.h>
int main()
{
	char strExp[]="1+2+2+1+2+5+4-1-3+4-8";
	int res=strExp[0]-'0';
	for(int i=1;i<strlen(strExp);i++)
	{
		if(strExp[i]=='+')
		{
			int right=strExp[i+1]-'0';
			res=res+right;
			i++;
		}
		else if(strExp[i]=='-')
		{
			int right=strExp[i+1]-'0';
			res=res-right;
			i++;
		}
	}
	printf("res=%d\n",res);
	return 0;
}


V2:char strExp[]="2*2/4*1/1*2*3/2";
#include <stdio.h>
#include <string.h>
int main()
{
	char strExp[]="2*2/4*1/1*2*3/2";
	int res=strExp[0]-'0';
	for(int i=1;i<strlen(strExp);i++)
	{
		if(strExp[i]=='*')
		{
			int right=strExp[i+1]-'0';
			res=res*right;
			i++;
		}
		else if(strExp[i]=='/')
		{
			int right=strExp[i+1]-'0';
			res=res/right;
			i++;
		}
	}
	printf("res=%d\n",res);
	return 0;
}


V3:char strExp[]="2+2*3+2/2-1";
第一种方法：
#include <stdio.h>
#include <string.h>
int main()
{
	char strExp[]="2+2*3+2/2-1";
	int res=strExp[0]-'0';
	for(int i=1;i<strlen(strExp);i++)
	{
		if(strExp[i]=='+')
		{
			int right=strExp[i+1]-'0';
			if(strExp[i+2]=='*')
			{
		     	int right1=strExp[i+3]-'0';
				res=res+right*right1;
				i=i+3;
			}
			else if(strExp[i+2]=='/')
			{
		     	int right1=strExp[i+3]-'0';
				res=res+right/right1;
				i=i+3;
			}
			else
			{
				res=res+right;
				i++;
			}
		}
		else if(strExp[i]=='-')
		{
			int right=strExp[i+1]-'0';
			if(strExp[i+2]=='*')
			{
		     	int right1=strExp[i+3]-'0';
				res=res-right*right1;
				i=i+3;
			}
			else if(strExp[i+2]=='/')
			{
		     	int right1=strExp[i+3]-'0';
				res=res-right/right1;
				i=i+3;
			}
			else
			{
				res=res-right;
				i++;
			}
		}
	}
	printf("res=%d\n",res);
	return 0;
}
第二种方法；
#include <stdio.h>
#include <string.h>
int main()
{
	char strExp[]="2+2*3+2/2-1"; 
	char strTmp[strlen(strExp)];

	int strTmpIndex=-1;
	for(int i=0;i<strlen(strExp);i++);
	{
		if(strExp[i]=='*')
		{
			int leftOperand=strTmp[strTmpIndex]-'0';
	    	int rightOperand=strExp[i+1]-'0';
	    	strTmp[strTmpIndex]=leftOperand*rightOperand+'0';
            i++;
		}
	    else if(strExp[i]=='/')
		{
			int leftOperand=strTmp[strTmpIndex]-'0';
	    	int rightOperand=strExp[i+1]-'0';
	    	strTmp[strTmpIndex]=leftOperand/rightOperand+'0';
            i++;
		}
		else 
		{
			strTmp[++strTmpIndex]=strExp[i];
		}
	}

	int res=strTmp[0]-'0';
	for(int i=1;i<strlen(strTmp);i++)
	{
		if(strTmp[i]=='+')
		{
			res+=strTmp[++i]-'0';
		}
		else if(strTmp[i]=='-')
		{
			res-=strTmp[++i]-'0';
		}
	}

	printf("res=%d\n",res);
	return 0;
}


V4：	char strExp[]="1-2.5*4+10.2/5.1";
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int isOperator(char c)
{
	if(c=='+'||c=='-'||c=='*'||c=='/')
	{
		return 1;
	}
	else 
	{
		return 0;
	}
}

void moveOperator(char *p)
{
	while(*p!='\0')
	{
		*p=*(p+1);
		p++;
	}
}

void moveOperand(float *p,float *end)
{
	while(p!=end)
	{
		*p=*(p+1);
		p++;
	}
}

int main()
{
	//char strExp[]="1-2.5*4+10.2/5.1";
	printf("please input a string expression including + - * /\n");
	char strExp[100];
	scanf("%s",strExp);
	char opoerators[100]={'\0'};
	float operands[100];
	
    //extract opertor + - * /
	int operatorsIndex=0;
	for(int i=0;i<strlen(strExp);i++)
	{
		if(isoprator(strExp[i])) 
		{
			operators[operatorsIndex++]=strExp[i];
			operatorsIndex++;
		}
	}
    //puts(operators);

    //extract operand  1 2.5 4 10.2 5.1
	int operandsIndex=0;
	for(int i=0;i<strlen(strExp);i++)
	{
		char temp[100]={'\0'};
		int tempIndex=0;
		while (!isoperator(strExp[i]))
		{
			temp[tempIndex]=strExp[i];
			i++;
			tempIndex++;
		}
		float floatV=atof(temp);
		printf("%f\n",floatV);
		operands[operandsIndex++]=floatV;
	}
	//for(int i=0;i<operandsIndex;i++) printf("%0.lf",operands[i]);

	//handle */
	char *poperator=operators;
	float *poperand=operands;
	while(*poperator!='\0')
	{
		if(*poperator=='*')
		{
			float leftOperand=*poperand;
			float rightOPerand=*(poperand+1);
			float res=leftOperand*rightOPerand;
			*operand=res;
			moveOperator(poperator);
			moveOperand(poperand+1,&operands[operandsIndex--]);
		}
		else(*poperator=='/')
		{
			float leftOperand=*poperand;
			float rightOPerand=*(poperand+1);
			float res=leftOperand/rightOPerand;
			*operand=res;
			moveOperator(poperator);
			moveOperand(poperand+1,&operands[operandsIndex--]);
		}
		else
		{
			poperator++;
			poperand++;
		}	
	}
	//puts(operators);

	//handle + -
	poperator=operators;
	poperand=poperands;
	while(*poperator!='\0')
	{
		if(*poperator=='+')
		{
			float leftOperand=*poperand;
			float rightOPerand=*(poperand+1);
			float res=leftOperand+rightOPerand;
			*poperand=res;
			moveOperator(poperator);
			moveOperand(poperand+1,&operands[operandsIndex++]);
		}
		else if(*poperator=='-')
		{
			float leftOperand=*poperand;
			float rightOPerand=*(poperand+1);
			float res=leftOperand-rightOPerand;
			*poperand=res;
			moveOperator(poperator);
			moveOperand(poperand+1,&operands[operandsIndex--]);
		}
	}

	printf("the result is %0.2f\n",operands[0]);

	return 0;
}
